name: Install Dependencies
on:
  workflow_call:
    inputs:
      mode:
        description: 'Either dev or prod. Dev will install dev dependencies, prod will remove dev dependencies.'
        required: true
        default: 'dev'
        type: string

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      ### Get Composer Cache and install PHP packages
      - name: Cache Composer packages
        id: cache-composer
        uses: actions/cache@v4
        with:
          path: |
            vendor
            vendor-prefixed
          key: composer-${{ inputs.mode }}-${{ runner.os }}-${{ hashFiles('composer.lock') }}
      - if: steps.cache-composer.outputs.cache-hit != 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - if: steps.cache-composer.outputs.cache-hit != 'true'
        name: Install Composer dependencies on cache miss
        run: |
          composer validate --strict
          mkdir -p vendor-prefixed
          mkdir -p bin
          if [ "${{ inputs.mode }}" = "dev" ]; then
            composer install --prefer-dist --no-interaction --no-progress
          else
            composer install --no-dev --prefer-dist --no-progress --no-suggest --ignore-platform-reqs --optimize-autoloader --classmap-authoritative
          fi
        shell: bash
      - if: steps.cache-composer.outputs.cache-hit == 'true'
        name: Rebuild autoload on cache hit
        run: |
          composer dump-autoload --optimize
        shell: bash

      ### Get NPM Cache and install node modules
      - id: cache-npm
        uses: actions/cache@v4
        with:
         path: node_modules
         key: node-dev-${{ runner.os }}-${{ hashFiles('package-lock.json') }} # Always -dev- because we need dev dependencies also for build
      - if: steps.cache-npm.outputs.cache-hit != 'true'
        uses: actions/setup-node@v6
        with:
          node-version: '22'
      - name: Install npm dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Build Assets for production and remove unused dev ressources
      - if: inputs.mode == 'prod'
        run: |
          npm run build
          rm -rf node_modules && npm ci --omit=dev
        shell: bash

      - name: Get full cache
        id: cache-all
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            vendor-prefixed
            node_modules
            build
          key: deps-${{ inputs.mode }}-${{ runner.os }}-${{ hashFiles('composer.lock') }}-${{ hashFiles('package-lock.json') }}